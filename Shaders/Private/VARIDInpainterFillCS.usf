// This source code is provided "as is" without warranty of any kind, either express or implied. Use at your own risk.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#pragma once

#include "/Engine/Private/Common.ush"
#include "VARIDCommon.ush"

uint2 InDispatchThreadIDOffset;
float2 InTexelSize;
int PassCounter;
Texture2D InMaskSRV;
Texture2D InColourSRV;
Texture2D InMetaDataSRV; 
RWTexture2D<float4> OutColourUAV;
RWTexture2D<float4> OutMetaDataUAV;	//rgba = UV.x, UV.y, PassCounter, Fill Status: 0=Filled or 1=Fill Me!

[numthreads(8, 8, 1)]
void MainCS
(
	uint3 DispatchThreadID : SV_DispatchThreadID
)
{
	uint2 ID = InDispatchThreadIDOffset + DispatchThreadID.xy;
	PassCounter++;	// ensure not zero based

	float4 MetaData = InMetaDataSRV[ID];    //default is passthrough whether it be in mask, on the mask edge or neither
	float4 Colour = InColourSRV[ID];

	if (InMaskSRV[ID].r > MaskThreshold)
	{
		if (InMetaDataSRV[ID].a == 1.0)	// 1 == not yet filled
		{
			float4 AccumulatedColour = float4(0, 0, 0, 1);
			int NumColours = 0;

			// in a clockwise order around the compass, check all neighbouring pixels

			if (InMetaDataSRV[ID + TopOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + TopOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + TopRightOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + TopRightOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + RightOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + RightOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + BottomRightOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + BottomRightOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + BottomOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + BottomOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + BottomLeftOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + BottomLeftOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + LeftOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + LeftOffset].rgba;
				NumColours++;
			}

			if (InMetaDataSRV[ID + TopLeftOffset].a == 0.0)
			{
				AccumulatedColour += InColourSRV[ID + TopLeftOffset].rgba;
				NumColours++;
			}

			if (NumColours > 0)
			{
				MetaData = float4(MetaData.x, MetaData.y, PassCounter, 0);
				Colour = AccumulatedColour / NumColours;	// colour is average of neighbours
			}
		}
	}

	OutMetaDataUAV[ID] = MetaData;
	OutColourUAV[ID] = Colour;
}