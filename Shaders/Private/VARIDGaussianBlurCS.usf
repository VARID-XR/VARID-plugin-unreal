// This source code is provided "as is" without warranty of any kind, either express or implied. Use at your own risk.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#pragma once

#include "/Engine/Private/Common.ush"
#include "VARIDCommon.ush"

// adapted from from DirectX samples, Minigraph, James Stanard 

uint2 DispatchThreadIDOffset;
Texture2D InSRV;
RWTexture2D<float4> OutUAV;


// The reason for separating channels is to reduce bank conflicts in the local data memory controller.  
// A large stride will cause more threads to collide on the same memory bank.
// 16x16=256 pixels with an 8x8=64 center that we will be blurring and writing out. 
// Each uint is two color channels packed together to save LDS memory
// only need 128 because pixels are packed. Actually holds 256 pixels. =16x16
// data is effectively compressed 128 instead of 256.
// 8x8 'window' is defined by the compute shader definition - which is 8x8
groupshared uint CacheR[128];
groupshared uint CacheG[128];
groupshared uint CacheB[128];


void Store2Pixels(uint index, float3 pixel1, float3 pixel2)
{
    CacheR[index] = f32tof16(pixel1.r) | f32tof16(pixel2.r) << 16;
    CacheG[index] = f32tof16(pixel1.g) | f32tof16(pixel2.g) << 16;
    CacheB[index] = f32tof16(pixel1.b) | f32tof16(pixel2.b) << 16;
}

void Load2Pixels(uint index, out float3 pixel1, out float3 pixel2)
{
    uint3 RGB = uint3(CacheR[index], CacheG[index], CacheB[index]);
    pixel1 = f16tof32(RGB);
    pixel2 = f16tof32(RGB >> 16);
}

void Store1Pixel(uint index, float3 pixel)
{
    CacheR[index] = asuint(pixel.r);
    CacheG[index] = asuint(pixel.g);
    CacheB[index] = asuint(pixel.b);
}

void Load1Pixel(uint index, out float3 pixel)
{
    pixel = asfloat(uint3(CacheR[index], CacheG[index], CacheB[index]));
}

// Blur two pixels horizontally.  This reduces LDS reads and pixel unpacking.
void BlurHorizontallyAndCacheResult(uint outIndex, uint leftMostIndex)
{
    float3 s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    Load2Pixels(leftMostIndex + 0, s0, s1);
    Load2Pixels(leftMostIndex + 1, s2, s3);
    Load2Pixels(leftMostIndex + 2, s4, s5);
    Load2Pixels(leftMostIndex + 3, s6, s7);
    Load2Pixels(leftMostIndex + 4, s8, s9);

    // store ready for vertical pass - these values currently represent just the horizontal pass - i.e. 1D. we need 2D :)
    Store1Pixel(outIndex, BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8));
    Store1Pixel(outIndex + 1, BlurPixels(s1, s2, s3, s4, s5, s6, s7, s8, s9));
}

float3 BlurVertically(uint topMostIndex)
{
    float3 s0, s1, s2, s3, s4, s5, s6, s7, s8;
    Load1Pixel(topMostIndex, s0);
    Load1Pixel(topMostIndex + 8, s1);
    Load1Pixel(topMostIndex + 16, s2);
    Load1Pixel(topMostIndex + 24, s3);
    Load1Pixel(topMostIndex + 32, s4);
    Load1Pixel(topMostIndex + 40, s5);
    Load1Pixel(topMostIndex + 48, s6);
    Load1Pixel(topMostIndex + 56, s7);
    Load1Pixel(topMostIndex + 64, s8);

    return BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8);    
}

[numthreads(8, 8, 1)]
void MainCS
(
    uint3 GroupID : SV_GroupID,
    uint3 GroupThreadID : SV_GroupThreadID,
    uint3 DispatchThreadID : SV_DispatchThreadID, // NOTE: dispatchThreadID.xyz: == groupID.xyz * (X, Y, Z) + groupThreadID.xyz    taken from GDC09
    uint GroupIndex : SV_GroupIndex
)
{
    // calculate pixel positions
    int2 GroupUpperLeft = (GroupID.xy << 3) - 4;                        // Upper-left pixel coordinate of group read location. -4,-4 because our 8x8 window is bordered with 4 pixels all around - to allow for 9 tap kernal
    int2 ThreadUpperLeft = (GroupThreadID.xy << 1) + GroupUpperLeft;    // Upper-left pixel coordinate of quad of 4 pixels that this thread will read
    uint row = GroupThreadID.y << 4;

    // Store 4 pixels in LDS (each thread reads 4 pixels)
    int destIdx = GroupThreadID.x + row;
    Store2Pixels(destIdx + 0, InSRV[ThreadUpperLeft + uint2(0, 0) + DispatchThreadIDOffset].rgb, InSRV[ThreadUpperLeft + uint2(1, 0) + DispatchThreadIDOffset].rgb);
    Store2Pixels(destIdx + 8, InSRV[ThreadUpperLeft + uint2(0, 1) + DispatchThreadIDOffset].rgb, InSRV[ThreadUpperLeft + uint2(1, 1) + DispatchThreadIDOffset].rgb);


    GroupMemoryBarrierWithGroupSync();


    // Horizontally blur the pixels in Cache
    uint outIndex = row + (GroupThreadID.x << 1);
    uint leftMostIndex = row + GroupThreadID.x + (GroupThreadID.x & 4);
    BlurHorizontallyAndCacheResult(outIndex, leftMostIndex);


    GroupMemoryBarrierWithGroupSync();


    // Vertically blur the pixels
    uint topMostIndex = (GroupThreadID.y << 3) + GroupThreadID.x;
    float3 blurredPixel = BlurVertically(topMostIndex);

    OutUAV[DispatchThreadID.xy + DispatchThreadIDOffset] = float4(blurredPixel.r, blurredPixel.g, blurredPixel.b, 1.0);
}
