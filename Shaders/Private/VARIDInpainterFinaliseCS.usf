// This source code is provided "as is" without warranty of any kind, either express or implied. Use at your own risk.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#pragma once

#include "/Engine/Private/Common.ush"
#include "VARIDCommon.ush"

uint2 InDispatchThreadIDOffset;
float2 InTexelSize;
SamplerState InBilinearSampler;
SamplerState InPointSampler;
int SamplerMipLevel;
Texture2D InMaskSRV;
Texture2D InMaskedColourSRV;
Texture2D InUnmaskedColourSRV;
Texture2D InMetaDataSRV;
RWTexture2D<float4> OutColourUAV;
RWTexture2D<float2> OutPositionUAV;

[numthreads(8, 8, 1)]
void MainCS
(
	uint3 DispatchThreadID : SV_DispatchThreadID
)
{
	uint2 ID = InDispatchThreadIDOffset + DispatchThreadID.xy;
	float2 UV = InTexelSize * (ID + 0.5);

	if (InMaskSRV[ID].r > MaskThreshold)
	{
		float2 SourceUV = InMetaDataSRV.SampleLevel(InPointSampler, UV, SamplerMipLevel).xy;	// point sampler ensures we dont interpolate UVs - bad for an inpainter!!! Interpolated values could lie in inpainter mask...
		OutPositionUAV[ID].xy = (SourceUV - UV) + SourceUV;		// manually interpolate - this will add the finer UV values from mip level 0 to the coarser UV values from mip level 3 (for example)
		OutColourUAV[ID] = InMaskedColourSRV.SampleLevel(InBilinearSampler, UV, SamplerMipLevel).rgba;
	}
	else
	{		
		OutPositionUAV[ID].xy = UV;
		OutColourUAV[ID] = InUnmaskedColourSRV[ID];
	}
}